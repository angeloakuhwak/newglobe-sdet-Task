name: CI

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore & Test (API)
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          BASIC_AUTH_USERNAME: ${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
          OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
        run: |
          dotnet restore
          dotnet test --collect:"XPlat Code Coverage" --logger "trx;LogFileName=api-tests.trx"

      - uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: |
            **/TestResults/*.trx
            **/TestResults/*/coverage.cobertura.xml
          if-no-files-found: warn

  # Playwright UI tests using C# (.NET)
  ui-smoke-csharp:
    name: UI smoke (Playwright .NET)
    runs-on: ubuntu-latest
    needs: api-tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore & Build UI tests (.NET)
        run: |
          dotnet restore ./ui-tests-csharp/UiTests.csproj
          dotnet build   ./ui-tests-csharp/UiTests.csproj -c Release

      # Installs browsers + Linux deps for Playwright
      - name: Install Playwright browsers (Linux deps)
        working-directory: ui-tests-csharp/bin/Release/net8.0
        run: |
          chmod +x ./playwright.sh
          ./playwright.sh install --with-deps

      # If your fixture runs headful (Headless=false), xvfb is required on Linux
      - name: Run UI smoke (C#) under Xvfb
        env:
          UI_BASE_URL: ${{ secrets.UI_BASE_URL }}
          UI_USERNAME: ${{ secrets.UI_USERNAME }}
          UI_PASSWORD: ${{ secrets.UI_PASSWORD }}
        run: |
          xvfb-run -a dotnet test ./ui-tests-csharp/UiTests.csproj -c Release --logger "trx;LogFileName=ui-csharp.trx"

      - name: Upload UI (.NET) artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-csharp-artifacts
          path: |
            ui-tests-csharp/TestResults/**/*.trx
            ui-tests-csharp/.auth/**
            **/playwright-report/**
            **/*.png
          if-no-files-found: warn

  k6-smoke:
    name: k6 smoke
    runs-on: ubuntu-latest
    needs: api-tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Run k6
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          BASIC_AUTH_USERNAME: ${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
          OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
        run: |
          mkdir -p k6-out
          k6 run k6/smoke.js --summary-export k6-out/summary.json

      - name: Upload k6 summary
        uses: actions/upload-artifact@v4
        with:
          name: k6-summary
          path: k6-out/summary.json
          if-no-files-found: warn

  zap-baseline:
    name: ZAP Baseline (informational)
    runs-on: ubuntu-latest
    needs: [ui-smoke-csharp, k6-smoke]
    steps:
      - uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          docker_name: ghcr.io/zaproxy/zaproxy:stable
          target: ${{ secrets.UI_BASE_URL }}
          rules_file_name: .zap/rules.tsv
          # Short run, generate HTML+JSON
          cmd_options: >-
            -m 5
            -a
            -r zap-baseline.html
            -J zap-baseline.json

      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-baseline.html
            zap-baseline.json
          if-no-files-found: warn
